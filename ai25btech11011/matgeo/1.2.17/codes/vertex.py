from ctypes import CDLL, c_double, POINTER
import numpy as np
import matplotlib.pyplot as plt

# Load the shared library
lib = CDLL("./libvertex.so")

# Define argument and return types
lib.find_fourth_vertex.argtypes = [POINTER(c_double), POINTER(c_double), POINTER(c_double), POINTER(c_double)]

# Define points
A = (c_double * 3)(3, -1, 2)
B = (c_double * 3)(1, -2, 4)
C = (c_double * 3)(-1, 1, 2)
D = (c_double * 3)()

# Call the C function
lib.find_fourth_vertex(A, B, C, D)

# Convert to Python list
D_point = [D[i] for i in range(3)]
print(f"Fourth vertex D: {D_point}")

#  Read coordinates from .dat file (generated by main C code)
coords = np.loadtxt("coords.dat")

#  Plot the parallelogram
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Points
x = coords[:, 0]
y = coords[:, 1]
z = coords[:, 2]

# Plot parallelogram edges
ax.plot([x[0], x[1]], [y[0], y[1]], [z[0], z[1]], 'r-')
ax.plot([x[1], x[2]], [y[1], y[2]], [z[1], z[2]], 'r-')
ax.plot([x[2], x[3]], [y[2], y[3]], [z[2], z[3]], 'r-')
ax.plot([x[3], x[0]], [y[3], y[0]], [z[3], z[0]], 'r-')

# Plot diagonals
ax.plot([x[0], x[2]], [y[0], y[2]], [z[0], z[2]], 'b--')
ax.plot([x[1], x[3]], [y[1], y[3]], [z[1], z[3]], 'b--')

# Labels
ax.scatter(x, y, z, color='black')
for i, txt in enumerate(['A', 'B', 'C', 'D']):
    ax.text(x[i], y[i], z[i], txt)
plt.savefig("/home/gara-varun-kumar/ee1030-2025/ai25btech11011/matgeo/1.2.17/figs/Fig 1.png")
plt.show()

