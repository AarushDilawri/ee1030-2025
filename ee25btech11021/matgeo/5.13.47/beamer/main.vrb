\frametitle{Python Script:fraction matrix.py}
\begin{verbatim}
print("\nSolution (X,Y,Z) = ({}, {}, {})".format(X, Y, Z))
# Symbolic answer
symbolic_points = []
for sx, sy, sz in itertools.product([1, -1], repeat=3):
    symbolic_points.append((f"{'+' if sx>0 else '-'}a",
                            f"{'+' if sy>0 else '-'}b",
                            f"{'+' if sz>0 else '-'}c"))
print("\nSymbolic solutions (in terms of a,b,c):")
for p in symbolic_points:
    print(p)
a, b, c = 2.0, 3.0, 1.0   # change these values
numeric_points = [(sx*a, sy*b, sz*c) for sx, sy, sz in itertools.product([1,-1],[1,-1],[1,-1])]
print("\nNumeric solutions (for a={}, b={}, c={}):".format(a, b, c))
for p in numeric_points:
    print(p)
np.savetxt("points_abc.txt", numeric_points)
print("\nSaved numeric points to points_abc.txt")
\end{verbatim}
